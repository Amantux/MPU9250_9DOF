#include <SimpleTimer.h>

#include <MadgwickAHRS.h>

#include "MPU9250.h"
// an MPU9250 object with the MPU-9250 sensor on I2C bus 0 with address 0x68
MPU9250 IMU(Wire,0x68);
int status;
int SRD = 1; //Change this var to change samples !Note! Currently this is the only value supported
float Samples = 1000/(1 + SRD);
volatile unsigned long TimeBetweenSamples = 1000/Samples;
volatile unsigned long CurrentTime = 0;
volatile unsigned long PriorTime = 0;
volatile unsigned long  priorUpdate = 0;
Madgwick filter;

SimpleTimer timer;  
float Center = 0;
float PriorMeasure;
int MotorCtrl = 7;
int MotorStatus = 1;
const int ledPin =  13;      // the number of the LED pin


#include <SoftwareSerial.h>
// XBee's DOUT (TX) is connected to pin 2 (Arduino's Software RX)
// XBee's DIN (RX) is connected to pin 3 (Arduino's Software TX)
SoftwareSerial XBee(2, 3); // RX, TX

void RC(){
  String MessageOut;
  float measure = filter.getPitch();
  float High = Center + 45;
  float Low = Center -45;
  if(measure > High)
  {
   measure = High;
  }
  if(measure < Low)
  {
   measure = Low;
  }
  int output = map(measure, Low, High, 0, 180);
  //Serial.println("My output:");
  //Serial.println(output);  
    if(output < 100)
    {
      MessageOut += "0";
    }
    MessageOut += output;
    MessageOut += MotorStatus;
    Serial.println(MessageOut);
     XBee.println(MessageOut);
    //Serial.println("enough motion");
}


void setup() {
  
   pinMode(MotorCtrl, INPUT);
  // serial to display data
  Serial.begin(115200);
  Serial.print("init");
  //while(!Serial) {}
  // start communication with IMU 
  status = IMU.begin();
  if (status < 0) {
    Serial.println("IMU initialization unsuccessful");
    Serial.println("Check IMU wiring or try cycling power");
    Serial.print("Status: ");
    Serial.println(status);
    while(1) {}
  }
   timer.setInterval(150, RC);
    XBee.begin(9600);
 // filter.begin(Samples);
  // setting the accelerometer full scale range to +/-8G 
  IMU.setAccelRange(MPU9250::ACCEL_RANGE_8G);
  // setting the gyroscope full scale range to +/-500 deg/s
  IMU.setGyroRange(MPU9250::GYRO_RANGE_500DPS);
  // setting DLPF bandwidth to 20 Hz
  IMU.setDlpfBandwidth(MPU9250::DLPF_BANDWIDTH_20HZ);
  // setting SRD to 19 for a 50 Hz update rate
  IMU.setSrd(SRD);
  // attaching the interrupt to microcontroller pin 1
  IMU.readSensor();
    // display the data
    PriorTime = CurrentTime;
    float GyroX = (float)IMU.getGyroX_rads()* 57.2958;
    float GyroY = (float)IMU.getGyroY_rads()* 57.2958;
    float GyroZ = (float)IMU.getGyroZ_rads()* 57.2958;
    //filter.update(GyroX,GyroY,GyroZ,IMU.getAccelX_mss(),IMU.getAccelY_mss(),IMU.getAccelZ_mss(),IMU.getMagY_uT(),IMU.getMagX_uT(),IMU.getMagZ_uT());
    filter.updateIMU(GyroX,GyroY,GyroZ,IMU.getAccelX_mss(),IMU.getAccelY_mss(),IMU.getAccelZ_mss());
    Center = filter.getPitch();
}
void loop() {
  // read the sensor
  timer.run();
  CurrentTime = millis();
  String CurrentCommand;
  if((CurrentTime-PriorTime) >= TimeBetweenSamples)
  {
    float delta = CurrentTime-PriorTime;
    IMU.readSensor();
    // display the data
    PriorTime = CurrentTime;
    float GyroX = (float)IMU.getGyroX_rads()* 57.2958; //MAD only takes deg/s as input, then under cover converts to rad/s
    float GyroY = (float)IMU.getGyroY_rads()* 57.2958;
    float GyroZ = (float)IMU.getGyroZ_rads()* 57.2958;
    filter.updateIMU(GyroX,GyroY,GyroZ,IMU.getAccelX_mss(),IMU.getAccelY_mss(),IMU.getAccelZ_mss());
  }
   float pitch = filter.getPitch();
    //ButtonCheck
   int OffOn= digitalRead(MotorCtrl);

   if(!OffOn)
   {
    MotorStatus = 1;
   }
   else
   {
    MotorStatus = 0;
   }
}
